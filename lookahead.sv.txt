`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 02/28/2024 12:54:23 AM
// Design Name: 
// Module Name: lookahead
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


//De la misma forma que en el anterior lo hice modular en donde llama a la funcion de propagation y generation haciendo que asi se anticipe al valor de C1

// Módulo para el generador anticipado de un bit
module LA(
    input logic A, B, Cin, // Entradas del generador anticipado
    
    output logic P, G, Cout // Salidas del generador anticipado
);
    // Cálculo de P y G
    assign G = A & B; //AND
    
    assign P = A ^ B; //XOR
    
    // Cálculo del acarreo de salida
    assign Cout = G | (P & Cin); // Se utiliza el esquema del generador anticipado
endmodule

// Módulo de 4 bits con generadores anticipados
module four_bit_look_ahead(
    input logic [8:0] sw, // Entradas desde los switches
    output logic [4:0] LED // Salidas hacia los LEDs
);
    // Declaración de señales internas
    logic p0, g0, p1, g1, p2, g2, p3, g3, C1, C2, C3;

    // Instanciación de generadores anticipados para cada bit
    LA gen1 (.A(sw[0]), .B(sw[1]), .Cin(sw[2]), .P(p0), .G(g0), .Cout(C1));
    LA gen2 (.A(sw[3]), .B(sw[4]), .Cin(C1), .P(p1), .G(g1), .Cout(C2));
    LA gen3 (.A(sw[5]), .B(sw[6]), .Cin(C2), .P(p2), .G(g2), .Cout(C3));
    LA gen4 (.A(sw[7]), .B(sw[8]), .Cin(C3), .P(p3), .G(g3), .Cout(LED[4]));

    // Cálculo de las salidas de los LEDs
    assign LED[0] = p0 ^ sw[2]; // Salida de LED[0]
    assign LED[1] = p1 ^ C1; // Salida de LED[1]
    assign LED[2] = p2 ^ C2; // Salida de LED[2]
    assign LED[3] = p3 ^ C3; // Salida de LED[3]
endmodule