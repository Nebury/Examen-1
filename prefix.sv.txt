`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 02/28/2024 01:04:23 AM
// Design Name: 
// Module Name: prefixCPA
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

// Módulo para el preprocesamiento de las entradas Ai y Bi
// Módulo para el preprocesamiento de las entradas Ai y Bi
module Preprocessing(
    input logic Ai, Bi, // Entradas Ai y Bi
    output logic P, G   // Salidas P y G
);

    // Implementa la lógica para las operaciones
    assign P = Ai ^ Bi; // P es el resultado de Ai XOR Bi
    assign G = Ai & Bi; // G es el resultado de Ai AND Bi

endmodule

// Módulo para la celda negra
module BlackCell(
    input logic Gi, Pi, Gi_1, Pi_1, // Entradas Gi, Pi, Gi-1, Pi-1
    output logic P, G               // Salidas P y G
);

    // Implementa la lógica para las operaciones
    assign P = Pi & Pi_1;           // P es el resultado de Pi AND Pi-1
    assign G = (Pi & Gi_1) | Gi;    // G es el resultado de (Pi AND Gi-1) OR Gi

endmodule

// Módulo para la suma
module Addition(
    input logic Pi,       // Entrada Pi
    input logic Ci_1,     // Entrada Ci-1
    output logic Si       // Salida Si
);

    // Implementa la lógica de la operación
    assign Si = Pi ^ Ci_1; // Si es el resultado de Pi XOR Ci-1

endmodule

// Módulo del sumador Kogge-Stone de 4 bits
module prefixCPA(
    input logic sw [8:0],    // Entradas A0 a B3 y Cin
    output logic LED0, LED1, LED2, LED3, LED4  // Salidas LED0 a LED4
);

    logic P0_pre, G0_pre, P1_pre, G1_pre, P2_pre, G2_pre, P3_pre, G3_pre; // Salidas de los preprocesadores
    logic P0_black, G0_black, P1_black, G1_black, P2_black, G2_black; // Salidas de las celdas negras

    // Instancias de los preprocesadores para cada par de entradas
    Preprocessing Pre_0 (.Ai(sw[1]), .Bi(sw[5]), .P(P0_pre), .G(G0_pre));
    Preprocessing Pre_1 (.Ai(sw[2]), .Bi(sw[6]), .P(P1_pre), .G(G1_pre));
    Preprocessing Pre_2 (.Ai(sw[3]), .Bi(sw[7]), .P(P2_pre), .G(G2_pre));
    Preprocessing Pre_3 (.Ai(sw[4]), .Bi(sw[8]), .P(P3_pre), .G(G3_pre));

    // Instancias de las celdas negras para cada par de salidas de preprocesadores
    BlackCell black_0 (.Gi_1(G0_pre), .Pi_1(P0_pre), .Gi(G1_pre), .Pi(P1_pre), .P(P0_black), .G(G0_black));
    BlackCell black_1 (.Gi_1(G1_pre), .Pi_1(P1_pre), .Gi(G2_pre), .Pi(P2_pre), .P(P1_black), .G(G1_black));
    BlackCell black_2 (.Gi_1(G2_pre), .Pi_1(P2_pre), .Gi(G3_pre), .Pi(P3_pre), .P(P2_black), .G(G2_black));

    // Instancia de la última celda negra sin las salidas P y G
    BlackCell black_4 (.Gi_1(G0_pre), .Pi_1(P0_pre), .Gi(G1_black), .Pi(P1_black));
    BlackCell black_5 (.Gi_1(G0_black), .Pi_1(P0_black), .Gi(G2_black), .Pi(P1_black));

    // Instancias de las sumas para calcular las salidas LED0 a LED3
    Addition S_0 (.Pi(P0_pre), .Ci_1(sw[0]), .Si(LED0));
    Addition S_1 (.Pi(P1_pre), .Ci_1(G0_pre), .Si(LED1));
    Addition S_2 (.Pi(P2_pre), .Ci_1(G1_pre), .Si(LED2));
    Addition S_3 (.Pi(P3_pre), .Ci_1(G2_pre), .Si(LED3));

    // Salida LED4 conectada a la salida de la última celda negra
    assign LED4 = G2_black;

endmodule